parameters:
  language: ''
  repo_address: $(IOTHUB-E2E-REPO-ADDRESS)
  repo_user: $(IOTHUB-E2E-REPO-USER)
  repo_password: $(IOTHUB-E2E-REPO-PASSWORD)
  image_edgeHub: mcr.microsoft.com/azureiotedge-hub:1.0
  image_edgeAgent: mcr.microsoft.com/azureiotedge-agent:1.0
  image_friendMod: $(IOTHUB-E2E-REPO-ADDRESS)/default-friend-module:$(Architecture)-v2
  image_testMod: ''
  test_image_tag: ''
  deployment_type: ''
  
steps:
- bash: ${HORTON_FRAMEWORKROOT}/scripts/setup/setup-iotedge.sh
  displayName: 'Install iotedge packages'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['deploymentType'], 'iotedge'))

- bash: |
    docker login -u ${{ parameters.repo_user }} -p ${{ parameters.repo_password }} ${{ parameters.repo_address }} 
  displayName: 'docker login'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['usesDocker'], 'yes'))

- bash: |
    docker pull ${{ parameters.image_testMod }} || docker pull ${{ parameters.image_testMod }}
  displayName: 'pre-cache test image'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['usesDocker'],'yes'))

- bash: |
    ( docker pull ${{ parameters.image_edgeAgent }} || docker pull ${{ parameters.image_edgeAgent }} ) &&
    ( docker pull ${{ parameters.image_edgeHub }} || docker pull ${{ parameters.image_edgeHub }} ) &&
    ( docker pull ${{ parameters.image_friendmod }} || docker pull ${{ parameters.image_friendmod }} )
  displayName: 'pre-cache edge images'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['deploymentType'], 'iotedge'))

- bash: 
    ${HORTON_FRAMEWORKROOT}/bin/horton deploy ${{ parameters.deployment_type }} image ${{ parameters.image_testMod }}
  displayName: 'Create new identites and deploy containers (docker)'
  env:
    IOTHUB_E2E_REPO_ADDRESS: $(IOTHUB-E2E-REPO-ADDRESS)
    IOTHUB_E2E_REPO_USER: $(IOTHUB-E2E-REPO-USER)
    IOTHUB_E2E_REPO_PASSWORD: $(IOTHUB-E2E-REPO-PASSWORD)
    IOTHUB_E2E_CONNECTION_STRING: $(IOTHUB-E2E-CONNECTION-STRING)
    IOTEDGE_DEBUG_LOG: $(IOTEDGE_DEBUG_LOG)
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['usesDocker'],'yes'))

- bash: 
    ${HORTON_FRAMEWORKROOT}/bin/horton deploy ${{ parameters.deployment_type }} python_inproc
  displayName: 'Create new identites (in-proc)'
  env:
    IOTHUB_E2E_REPO_ADDRESS: $(IOTHUB-E2E-REPO-ADDRESS)
    IOTHUB_E2E_REPO_USER: $(IOTHUB-E2E-REPO-USER)
    IOTHUB_E2E_REPO_PASSWORD: $(IOTHUB-E2E-REPO-PASSWORD)
    IOTHUB_E2E_CONNECTION_STRING: $(IOTHUB-E2E-CONNECTION-STRING)
    IOTEDGE_DEBUG_LOG: $(IOTEDGE_DEBUG_LOG)
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['usesDocker'],'no'), eq(variables['pythonInproc'], 'yes'))

- powershell: $(Horton.FrameworkRoot)/scripts/verify-deployment.ps1 edgeHub ${{ parameters.image_edgeHub }}
  displayName: 'Verify edgeHub deployment'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['deploymentType'], 'iotedge'))

- powershell: $(Horton.FrameworkRoot)/scripts/verify-deployment.ps1 edgeAgent ${{ parameters.image_edgeAgent }}
  displayName: 'Verify edgeAgent deployment'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['deploymentType'], 'iotedge'))

- powershell: $(Horton.FrameworkRoot)/scripts/verify-deployment.ps1 friendMod ${{ parameters.image_friendMod }}
  displayName: 'Verify friendMod deployment'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['deploymentType'], 'iotedge'))

- powershell: $(Horton.FrameworkRoot)/scripts/verify-deployment.ps1 testMod ${{ parameters.image_testMod }}
  displayName: 'Verify testMod deployment'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['usesDocker'],'yes'))

- bash: 
    source ${HORTON_FRAMEWORKROOT}/bin/activate_horton &&
    python pyscripts/ensure_container.py testMod
  displayName: 'Verify that testMod is responding'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['usesDocker'],'yes'))

- bash:
    source ${HORTON_FRAMEWORKROOT}/bin/activate_horton &&
    python pyscripts/ensure_container.py friendMod
  displayName: 'Verify that friendMod is responding'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['deploymentType'], 'iotedge'))

- bash: sleep 30
  displayName: 'give edgeHub 30 seconds to start up'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'), eq(variables['deploymentType'], 'iotedge'))
  
- bash: 
    ${HORTON_FRAMEWORKROOT}/bin/horton get_credentials
  displayName: 'Get credentials'
  condition: and(succeeded(), ne(variables['skipTest'],'yes'))

- bash:
    source ${HORTON_FRAMEWORKROOT}/bin/activate_horton &&
    python ${HORTON_FRAMEWORKROOT}/docker_images/net_control_app/main.py &
  displayName: 'start net control app'
  condition: and(always(), ne(variables['skipTest'],'yes'), eq(variables['pythonInproc'], 'yes'), ne(variables['Agent.OS'], 'Windows_NT'))
