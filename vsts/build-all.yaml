name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)
variables:
  Horton.FrameworkRoot: $(Build.SourcesDirectory)
  variant: ''
jobs:

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: node
    variant: node10
    repo: Azure/azure-iot-sdk-node
    commit: master
    job_tag: node10
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: node
    variant: node6
    repo: Azure/azure-iot-sdk-node
    commit: master
    job_tag: node6
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: node
    variant: node8
    repo: Azure/azure-iot-sdk-node
    commit: master
    job_tag: node8
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: c
    repo: Azure/azure-iot-sdk-c
    commit: master
    job_tag: c
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: java
    repo: Azure/azure-iot-sdk-java
    commit: master
    job_tag: java
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: csharp
    repo: Azure/azure-iot-sdk-csharp
    commit: master
    job_tag: csharp
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: pythonv2
    variant: py27
    repo: Azure/azure-iot-sdk-python
    commit: master
    job_tag: py27
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: pythonv2
    variant: py35
    repo: Azure/azure-iot-sdk-python
    commit: master
    job_tag: py35
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: pythonv2
    variant: py36
    repo: Azure/azure-iot-sdk-python
    commit: master
    job_tag: py36
    forced_image: $(Horton.ForcedImage)

- template: templates/jobs-build-docker-image.yaml
  parameters:
    language: pythonv2
    variant: py37
    repo: Azure/azure-iot-sdk-python
    commit: master
    job_tag: py37
    forced_image: $(Horton.ForcedImage)

- job: "test"
  pool:
      vmImage: 'Ubuntu 16.04'
  dependsOn:
    - "build_node10_container"
    - "build_node6_container"
    - "build_node8_container"
    - "build_c_container"
    - "build_java_container"
    - "build_csharp_container"
    - "build_py27_container"
    - "build_py35_container"
    - "build_py36_container"
    - "build_py37_container"

  strategy:
    matrix:
      c_iothub_module_mqtt:                 { language: c, suite: iothub_module_mqtt }
      c_edgehub_module_mqtt:                { language: c, suite: edgehub_module_mqtt }
      c_iothub_module_mqtt_ws:              { language: c, suite: iothub_module_mqtt_ws }
      c_edgehub_module_mqtt_ws:             { language: c, suite: edgehub_module_mqtt_ws }
      c_iothub_module_amqp:                 { language: c, suite: iothub_module_amqp }
      c_edgehub_module_amqp:                { language: c, suite: edgehub_module_amqp }
      c_iothub_module_amqp_ws:              { language: c, suite: iothub_module_amqp_ws }
      c_edgehub_module_amqp_ws:             { language: c, suite: edgehub_module_amqp_ws }

      node10_iothub_module_mqtt:              { language: node, variant: node10, suite: iothub_module_mqtt }
      node10_edgehub_module_mqtt:             { language: node, variant: node10, suite: edgehub_module_mqtt }
      node10_iothub_module_mqtt_ws:           { language: node, variant: node10, suite: iothub_module_mqtt_ws }
      node10_edgehub_module_mqtt_ws:          { language: node, variant: node10, suite: edgehub_module_mqtt_ws }
      node10_iothub_module_amqp:              { language: node, variant: node10, suite: iothub_module_amqp }
      node10_edgehub_module_amqp:             { language: node, variant: node10, suite: edgehub_module_amqp }
      node10_iothub_module_amqp_ws:           { language: node, variant: node10, suite: iothub_module_amqp_ws }
      node10_edgehub_module_amqp_ws:          { language: node, variant: node10, suite: edgehub_module_amqp_ws }

      node6_iothub_module_mqtt:              { language: node, variant: node6, suite: iothub_module_mqtt }
      node6_edgehub_module_mqtt:             { language: node, variant: node6, suite: edgehub_module_mqtt }
      node6_iothub_module_mqtt_ws:           { language: node, variant: node6, suite: iothub_module_mqtt_ws }
      node6_edgehub_module_mqtt_ws:          { language: node, variant: node6, suite: edgehub_module_mqtt_ws }
      node6_iothub_module_amqp:              { language: node, variant: node6, suite: iothub_module_amqp }
      node6_edgehub_module_amqp:             { language: node, variant: node6, suite: edgehub_module_amqp }
      node6_iothub_module_amqp_ws:           { language: node, variant: node6, suite: iothub_module_amqp_ws }
      node6_edgehub_module_amqp_ws:          { language: node, variant: node6, suite: edgehub_module_amqp_ws }

      node8_iothub_module_mqtt:              { language: node, variant: node8, suite: iothub_module_mqtt }
      node8_edgehub_module_mqtt:             { language: node, variant: node8, suite: edgehub_module_mqtt }
      node8_iothub_module_mqtt_ws:           { language: node, variant: node8, suite: iothub_module_mqtt_ws }
      node8_edgehub_module_mqtt_ws:          { language: node, variant: node8, suite: edgehub_module_mqtt_ws }
      node8_iothub_module_amqp:              { language: node, variant: node8, suite: iothub_module_amqp }
      node8_edgehub_module_amqp:             { language: node, variant: node8, suite: edgehub_module_amqp }
      node8_iothub_module_amqp_ws:           { language: node, variant: node8, suite: iothub_module_amqp_ws }
      node8_edgehub_module_amqp_ws:          { language: node, variant: node8, suite: edgehub_module_amqp_ws }

      java_iothub_module_mqtt:              { language: java, suite: iothub_module_mqtt }
      java_edgehub_module_mqtt:             { language: java, suite: edgehub_module_mqtt }
      java_iothub_module_mqtt_ws:           { language: java, suite: iothub_module_mqtt_ws }
      java_edgehub_module_mqtt_ws:          { language: java, suite: edgehub_module_mqtt_ws }
      java_iothub_module_amqp:              { language: java, suite: iothub_module_amqp }
      java_edgehub_module_amqp:             { language: java, suite: edgehub_module_amqp }
      java_iothub_module_amqp_ws:           { language: java, suite: iothub_module_amqp_ws }
      java_edgehub_module_amqp_ws:          { language: java, suite: edgehub_module_amqp_ws }

      csharp_iothub_module_mqtt:            { language: csharp, suite: iothub_module_mqtt }
      csharp_edgehub_module_mqtt:           { language: csharp, suite: edgehub_module_mqtt }
      csharp_iothub_module_mqtt_ws:         { language: csharp, suite: iothub_module_mqtt_ws }
      csharp_edgehub_module_mqtt_ws:        { language: csharp, suite: edgehub_module_mqtt_ws }
      csharp_iothub_module_amqp:            { language: csharp, suite: iothub_module_amqp }
      csharp_edgehub_module_amqp:           { language: csharp, suite: edgehub_module_amqp }
      csharp_iothub_module_amqp_ws:         { language: csharp, suite: iothub_module_amqp_ws }
      csharp_edgehub_module_amqp_ws:        { language: csharp, suite: edgehub_module_amqp_ws }

      py27_iothub_module_and_device_mqtt:   { language: pythonv2, variant: py27, suite: iothub_module_and_device_mqtt }
      py27_edgehub_module_mqtt:             { language: pythonv2, variant: py27, suite: edgehub_module_mqtt }

      py35_iothub_module_and_device_mqtt:         { language: pythonv2, variant: py35, suite: iothub_module_and_device_mqtt }
      py35_edgehub_module_mqtt:                   { language: pythonv2, variant: py35, suite: edgehub_module_mqtt }
      py35_iothub_module_and_device_mqtt_async:   { language: pythonv2, variant: py35, async: yes, suite: iothub_module_and_device_mqtt }
      py35_edgehub_module_mqtt_async:             { language: pythonv2, variant: py35, async: yes, suite: edgehub_module_mqtt }

      py36_iothub_module_and_device_mqtt:         { language: pythonv2, variant: py36, suite: iothub_module_and_device_mqtt }
      py36_edgehub_module_mqtt:                   { language: pythonv2, variant: py36, suite: edgehub_module_mqtt }
      py36_iothub_module_and_device_mqtt_async:   { language: pythonv2, variant: py36, async: yes, suite: iothub_module_and_device_mqtt }
      py36_edgehub_module_mqtt_async:             { language: pythonv2, variant: py36, async: yes, suite: edgehub_module_mqtt }

      py37_iothub_module_and_device_mqtt:         { language: pythonv2, variant: py37, suite: iothub_module_and_device_mqtt }
      py37_edgehub_module_mqtt:                   { language: pythonv2, variant: py37, suite: edgehub_module_mqtt }
      py37_iothub_module_and_device_mqtt_async:   { language: pythonv2, variant: py37, async: yes, suite: iothub_module_and_device_mqtt }
      py37_edgehub_module_mqtt_async:             { language: pythonv2, variant: py37, async: yes, suite: edgehub_module_mqtt }

  steps:
  - template: templates/steps-deploy-and-run-pytest.yaml
    parameters:
      language: $(language)
      suite: $(suite)
      forced_image: $(Horton.ForcedImage)
      async: $(async)
      variant: $(variant)

