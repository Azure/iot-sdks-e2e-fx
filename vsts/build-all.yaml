name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)
variables:
  Horton.FrameworkRoot: $(Build.SourcesDirectory)

jobs:
- job: "build_linux_amd64"
  pool:
    vmImage: 'Ubuntu 20.04'
  strategy:
    matrix:
        c:      { language: c }
        java:   { language: java }
        csharp: { language: csharp }
        node12: { variant: node12 }
        py38:   { variant: py38 }

  steps:
  - template: templates/steps-build-docker-image.yaml
    parameters:
      language: $(language)
      variant: $(variant)


- job: "test_linux_amd64"
  pool:
      vmImage: 'Ubuntu 20.04'
  dependsOn:
    "build_linux_amd64"

  strategy:
    matrix:
      c_mqtt_iothub_module:     { suite: c_mqtt_iothub_moduled }
      c_mqtt_edgehub_module:    { suite: c_mqtt_edgehub_module }
      c_mqttws_iothub_module:   { suite: c_mqttws_iothub_module }
      c_mqttws_edgehub_module:  { suite: c_mqttws_edgehub_module }
      c_amqp_iothub_module:     { suite: c_amqp_iothub_module }
      c_amqpws_iothub_module:   { suite: c_amqpws_iothub_module }

      csharp_mqtt_iothub_module:    { suite: csharp_mqtt_iothub_module }
      csharp_mqtt_edgehub_module:   { suite: csharp_mqtt_edgehub_module }
      csharp_mqttws_iothub_module:  { suite: csharp_mqttws_iothub_module }
      csharp_mqttws_edgehub_module: { suite: csharp_mqttws_edgehub_module } 
      csharp_amqp_iothub_module:    { suite: csharp_amqp_iothub_module }
      csharp_amqp_edgehub_module:   { suite: csharp_amqp_edgehub_module }
      csharp_amqpws_iothub_module:  { suite: csharp_amqpws_iothub_module }
      csharp_amqpws_edgehub_module: { suite: csharp_amqpws_edgehub_module }

      java_mqtt_iothub_module:      { suite: java_mqtt_iothub_module }
      java_mqtt_edgehub_module:     { suite: java_mqtt_edgehub_module }
      java_mqttws_iothub_module:    { suite: java_mqttws_iothub_module }
      java_mqttws_edgehub_module:   { suite: java_mqttws_edgehub_module }
      java_amqp_iothub_module:      { suite: java_amqp_iothub_module }
      java_amqp_edgehub_module:     { suite: java_amqp_edgehub_module }
      java_amqpws_iothub_module:    { suite: java_amqpws_iothub_module }
      java_amqpws_edgehub_module:   { suite: java_amqpws_edgehub_module }

      node12_mqtt_iothub_module:    { suite: node12_mqtt_iothub_module }
      node12_mqtt_edgehub_module:   { suite: node12_mqtt_edgehub_module }
      node12_mqttws_iothub_module:  { suite: node12_mqttws_iothub_module }
      node12_mqttws_edgehub_module: { suite: node12_mqttws_edgehub_module }
      node12_amqp_iothub_module:    { suite: node12_amqp_iothub_module }
      node12_amqp_edgehub_module:   { suite: node12_amqp_edgehub_module }
      node12_amqpws_iothub_module:  { suite: node12_amqpws_iothub_module }
      node12_amqpws_edgehub_module: { suite: node12_amqpws_edgehub_module }

      py38_mqtt_iothub_module_and_device:           { suite: py38_mqtt_iothub_module_and_device }
      py38_mqtt_edgehub_module:                     { suite: py38_mqtt_edgehub_module }
      py38_mqttws_iothub_module_and_device:         { suite: py38_mqttws_iothub_module_and_device }
      py38_mqttws_edgehub_module:                   { suite: py38_mqttws_edgehub_module }

      py38_mqtt_async_iothub_module_and_device:     { suite: py38_mqtt_async_iothub_module_and_device }
      py38_mqtt_async_edgehub_module:               { suite: py38_mqtt_async_edgehub_module }
      py38_mqttws_async_iothub_module_and_device:   { suite: py38_mqttws_async_iothub_module_and_device }
      py38_mqttws_async_edgehub_module:             { suite: py38_mqttws_async_edgehub_module }

      python_inproc_mqtt_iothub_module_and_device:          { suite: python_inproc_mqtt_iothub_module_and_device }
      python_inproc_mqtt_iothub_module_and_device_async:    { suite: python_inproc_mqtt_iothub_module_and_device_async }
      python_inproc_mqtt_edgehub_module:                    { suite: python_inproc_mqtt_edgehub_module }
      python_inproc_mqtt_edgehub_module_async:              { suite: python_inproc_mqtt_edgehub_module_async }

  steps:
  - template: templates/steps-deploy-and-run-pytest.yaml
    parameters:
      forced_image: $(Horton.ForcedImage)
      suite: $(suite)


- job: "test_windows_python_inproc"
  pool:
      vmImage: 'windows-latest'
  strategy:
    matrix:
      python_inproc_mqtt_iothub_module_and_device:          { suite: python_inproc_mqtt_iothub_module_and_device }
      python_inproc_mqtt_iothub_module_and_device_async:    { suite: python_inproc_mqtt_iothub_module_and_device_async }

  steps:
  - template: templates/steps-deploy-and-run-pytest.yaml
    parameters:
      forced_image: $(Horton.ForcedImage)
      suite: $(suite)

