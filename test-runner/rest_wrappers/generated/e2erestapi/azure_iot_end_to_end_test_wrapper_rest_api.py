# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from .operations.wrapper_operations import WrapperOperations
from .operations.registry_operations import RegistryOperations
from .operations.module_operations import ModuleOperations
from .operations.service_operations import ServiceOperations
from .operations.device_operations import DeviceOperations
from . import models


class AzureIOTEndToEndTestWrapperRestApiConfiguration(Configuration):
    """Configuration for AzureIOTEndToEndTestWrapperRestApi
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'http://localhost'

        super(AzureIOTEndToEndTestWrapperRestApiConfiguration, self).__init__(base_url)

        self.add_user_agent('azureiotendtoendtestwrapperrestapi/{}'.format(VERSION))


class AzureIOTEndToEndTestWrapperRestApi(object):
    """REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.

    :ivar config: Configuration for client.
    :vartype config: AzureIOTEndToEndTestWrapperRestApiConfiguration

    :ivar wrapper: Wrapper operations
    :vartype wrapper: e2erestapi.operations.WrapperOperations
    :ivar registry: Registry operations
    :vartype registry: e2erestapi.operations.RegistryOperations
    :ivar module: Module operations
    :vartype module: e2erestapi.operations.ModuleOperations
    :ivar service: Service operations
    :vartype service: e2erestapi.operations.ServiceOperations
    :ivar device: Device operations
    :vartype device: e2erestapi.operations.DeviceOperations

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        self.config = AzureIOTEndToEndTestWrapperRestApiConfiguration(base_url)
        self._client = ServiceClient(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1.0.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.wrapper = WrapperOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.registry = RegistryOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.module = ModuleOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.service = ServiceOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.device = DeviceOperations(
            self._client, self.config, self._serialize, self._deserialize)

    def net_set_destination(
            self, ip, transport_type, custom_headers=None, raw=False, **operation_config):
        """Set destination for net disconnect ops.

        :param ip:
        :type ip: str
        :param transport_type: Transport to use. Possible values include:
         'amqp', 'amqpws', 'mqtt', 'mqttws', 'http'
        :type transport_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.net_set_destination.metadata['url']
        path_format_arguments = {
            'ip': self._serialize.url("ip", ip, 'str'),
            'transportType': self._serialize.url("transport_type", transport_type, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    net_set_destination.metadata = {'url': '/net/setDestination/{ip}/{transportType}'}

    def net_disconnect(
            self, disconnect_type, custom_headers=None, raw=False, **operation_config):
        """Simulate a network disconnection.

        :param disconnect_type: disconnect method for dropped connection
         tests. Possible values include: 'DROP', 'REJECT'
        :type disconnect_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.net_disconnect.metadata['url']
        path_format_arguments = {
            'disconnectType': self._serialize.url("disconnect_type", disconnect_type, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    net_disconnect.metadata = {'url': '/net/disconnect/{disconnectType}'}

    def net_reconnect(
            self, custom_headers=None, raw=False, **operation_config):
        """Reconnect the network after a simulated network disconnection.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.net_reconnect.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    net_reconnect.metadata = {'url': '/net/reconnect'}

    def net_disconnect_after_c2d(
            self, disconnect_type, custom_headers=None, raw=False, **operation_config):
        """Simulate a disconnect after the next C2D transfer.

        :param disconnect_type: disconnect method for dropped connection
         tests. Possible values include: 'DROP', 'REJECT'
        :type disconnect_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.net_disconnect_after_c2d.metadata['url']
        path_format_arguments = {
            'disconnectType': self._serialize.url("disconnect_type", disconnect_type, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    net_disconnect_after_c2d.metadata = {'url': '/net/disconnectAfterC2D/{disconnectType}'}

    def net_disconnect_after_d2c(
            self, disconnect_type, custom_headers=None, raw=False, **operation_config):
        """Simulate a disconnect after the next D2C transfer.

        :param disconnect_type: disconnect method for dropped connection
         tests. Possible values include: 'DROP', 'REJECT'
        :type disconnect_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.net_disconnect_after_d2c.metadata['url']
        path_format_arguments = {
            'disconnectType': self._serialize.url("disconnect_type", disconnect_type, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    net_disconnect_after_d2c.metadata = {'url': '/net/disconnectAfterD2c/{disconnectType}'}
