/**
 * IoT SDK Device & Client REST API
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "EventhubApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

EventhubApi::EventhubApi() {
	std::shared_ptr<EventhubApiEventhubConnectResource> spEventhubApiEventhubConnectResource = std::make_shared<EventhubApiEventhubConnectResource>();
	this->publish(spEventhubApiEventhubConnectResource);
	
	std::shared_ptr<EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource> spEventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource = std::make_shared<EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource>();
	this->publish(spEventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource);
	
	std::shared_ptr<EventhubApiEventhubConnectionIdDisconnectResource> spEventhubApiEventhubConnectionIdDisconnectResource = std::make_shared<EventhubApiEventhubConnectionIdDisconnectResource>();
	this->publish(spEventhubApiEventhubConnectionIdDisconnectResource);
	
	std::shared_ptr<EventhubApiEventhubConnectionIdEnableTelemetryResource> spEventhubApiEventhubConnectionIdEnableTelemetryResource = std::make_shared<EventhubApiEventhubConnectionIdEnableTelemetryResource>();
	this->publish(spEventhubApiEventhubConnectionIdEnableTelemetryResource);
	
}

EventhubApi::~EventhubApi() {}

void EventhubApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void EventhubApi::stopService() {
	this->stop();
}

EventhubApiEventhubConnectResource::EventhubApiEventhubConnectResource()
{
	this->set_path("/eventhub/connect/");
	this->set_method_handler("PUT",
		std::bind(&EventhubApiEventhubConnectResource::PUT_method_handler, this,
			std::placeholders::_1));
}

EventhubApiEventhubConnectResource::~EventhubApiEventhubConnectResource()
{
}

void EventhubApiEventhubConnectResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string connectionString = request->get_query_parameter("connectionString", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource::EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource()
{
	this->set_path("/eventhub/{connectionId: .*}/deviceTelemetry/{deviceId: .*}/");
	this->set_method_handler("GET",
		std::bind(&EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource::GET_method_handler, this,
			std::placeholders::_1));
}

EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource::~EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource()
{
}

void EventhubApiEventhubConnectionIdDeviceTelemetryDeviceIdResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			const std::string deviceId = request->get_path_parameter("deviceId", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



EventhubApiEventhubConnectionIdDisconnectResource::EventhubApiEventhubConnectionIdDisconnectResource()
{
	this->set_path("/eventhub/{connectionId: .*}/disconnect//");
	this->set_method_handler("PUT",
		std::bind(&EventhubApiEventhubConnectionIdDisconnectResource::PUT_method_handler, this,
			std::placeholders::_1));
}

EventhubApiEventhubConnectionIdDisconnectResource::~EventhubApiEventhubConnectionIdDisconnectResource()
{
}

void EventhubApiEventhubConnectionIdDisconnectResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



EventhubApiEventhubConnectionIdEnableTelemetryResource::EventhubApiEventhubConnectionIdEnableTelemetryResource()
{
	this->set_path("/eventhub/{connectionId: .*}/enableTelemetry/");
	this->set_method_handler("PUT",
		std::bind(&EventhubApiEventhubConnectionIdEnableTelemetryResource::PUT_method_handler, this,
			std::placeholders::_1));
}

EventhubApiEventhubConnectionIdEnableTelemetryResource::~EventhubApiEventhubConnectionIdEnableTelemetryResource()
{
}

void EventhubApiEventhubConnectionIdEnableTelemetryResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

