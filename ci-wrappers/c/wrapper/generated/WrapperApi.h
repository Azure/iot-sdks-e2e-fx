/**
 * IoT SDK Device & Client REST API
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * WrapperApi.h
 *
 * 
 */

#ifndef WrapperApi_H_
#define WrapperApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

namespace io {
namespace swagger {
namespace server {
namespace api {

// restbed::Service must be virtual so all the APIs can share the same Service impl when we use multiple inheritance
class  WrapperApi: public virtual restbed::Service
{
public:
	WrapperApi();
	~WrapperApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// verify that the clients have cleaned themselves up completely
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  WrapperApiWrapperCleanupResource: public restbed::Resource
{
public:
	WrapperApiWrapperCleanupResource();
    virtual ~WrapperApiWrapperCleanupResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// log a message to output
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  WrapperApiWrapperMessageResource: public restbed::Resource
{
public:
	WrapperApiWrapperMessageResource();
    virtual ~WrapperApiWrapperMessageResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Terminate a wrapper, optionally returning the log
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  WrapperApiWrapperSessionResource: public restbed::Resource
{
public:
	WrapperApiWrapperSessionResource();
    virtual ~WrapperApiWrapperSessionResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* WrapperApi_H_ */

