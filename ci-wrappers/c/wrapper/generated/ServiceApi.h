/**
 * IoT SDK Device & Client REST API
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ServiceApi.h
 *
 * 
 */

#ifndef ServiceApi_H_
#define ServiceApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include <string>

namespace io {
namespace swagger {
namespace server {
namespace api {

class  ServiceApi: public virtual restbed::Service
{
public:
	ServiceApi();
	~ServiceApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// Connect to service
/// </summary>
/// <remarks>
/// Connect to the Azure IoTHub service.  More specifically, the SDK saves the connection string that is passed in for future use.
/// </remarks>
class  ServiceApiServiceConnectResource: public restbed::Resource
{
public:
	ServiceApiServiceConnectResource();
    virtual ~ServiceApiServiceConnectResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// call the given method on the given device
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ServiceApiServiceConnectionIdDeviceMethodDeviceIdResource: public restbed::Resource
{
public:
	ServiceApiServiceConnectionIdDeviceMethodDeviceIdResource();
    virtual ~ServiceApiServiceConnectionIdDeviceMethodDeviceIdResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Disconnect from the service
/// </summary>
/// <remarks>
/// Disconnects from the Azure IoTHub service.  More specifically, closes all connections and cleans up all resources for the active connection
/// </remarks>
class  ServiceApiServiceConnectionIdDisconnectResource: public restbed::Resource
{
public:
	ServiceApiServiceConnectionIdDisconnectResource();
    virtual ~ServiceApiServiceConnectionIdDisconnectResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// call the given method on the given module
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ServiceApiServiceConnectionIdModuleMethodDeviceIdModuleIdResource: public restbed::Resource
{
public:
	ServiceApiServiceConnectionIdModuleMethodDeviceIdModuleIdResource();
    virtual ~ServiceApiServiceConnectionIdModuleMethodDeviceIdModuleIdResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* ServiceApi_H_ */

