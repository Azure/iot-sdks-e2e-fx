/**
 * IoT SDK Device & Client REST API
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "WrapperApi.h"
#include "WrapperGlue.h"

WrapperGlue wrapper_glue;

namespace io {
namespace swagger {
namespace server {
namespace api {

WrapperApi::WrapperApi() {
	std::shared_ptr<WrapperApiWrapperCleanupResource> spWrapperApiWrapperCleanupResource = std::make_shared<WrapperApiWrapperCleanupResource>();
	this->publish(spWrapperApiWrapperCleanupResource);
	
	std::shared_ptr<WrapperApiWrapperMessageResource> spWrapperApiWrapperMessageResource = std::make_shared<WrapperApiWrapperMessageResource>();
	this->publish(spWrapperApiWrapperMessageResource);
	
	std::shared_ptr<WrapperApiWrapperSessionResource> spWrapperApiWrapperSessionResource = std::make_shared<WrapperApiWrapperSessionResource>();
	this->publish(spWrapperApiWrapperSessionResource);
	
}

WrapperApi::~WrapperApi() {}

void WrapperApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void WrapperApi::stopService() {
	this->stop();
}

WrapperApiWrapperCleanupResource::WrapperApiWrapperCleanupResource()
{
	this->set_path("/wrapper/cleanup/");
	this->set_method_handler("PUT",
		std::bind(&WrapperApiWrapperCleanupResource::PUT_method_handler, this,
			std::placeholders::_1));
}

WrapperApiWrapperCleanupResource::~WrapperApiWrapperCleanupResource()
{
}

void WrapperApiWrapperCleanupResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



WrapperApiWrapperMessageResource::WrapperApiWrapperMessageResource()
{
	this->set_path("/wrapper/message/");
	this->set_method_handler("PUT",
		std::bind(&WrapperApiWrapperMessageResource::PUT_method_handler, this,
			std::placeholders::_1));
}

WrapperApiWrapperMessageResource::~WrapperApiWrapperMessageResource()
{
}

void WrapperApiWrapperMessageResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{
			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));

			wrapper_glue.PrintMessage(requestBody.c_str());
			
			session->close(200, "OK", { {"Connection", "close"} });
		});
}



WrapperApiWrapperSessionResource::WrapperApiWrapperSessionResource()
{
	this->set_path("/wrapper/session/");
	this->set_method_handler("GET",
		std::bind(&WrapperApiWrapperSessionResource::GET_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PUT",
		std::bind(&WrapperApiWrapperSessionResource::PUT_method_handler, this,
			std::placeholders::_1));
}

WrapperApiWrapperSessionResource::~WrapperApiWrapperSessionResource()
{
}

void WrapperApiWrapperSessionResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}

void WrapperApiWrapperSessionResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			
		
			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



}
}
}
}

