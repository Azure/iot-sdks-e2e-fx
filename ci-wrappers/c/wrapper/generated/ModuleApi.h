/**
 * IoT SDK Device & Client REST API
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.1.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ModuleApi.h
 *
 * 
 */

#ifndef ModuleApi_H_
#define ModuleApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

namespace io {
namespace swagger {
namespace server {
namespace api {

// restbed::Service must be virtual so all the APIs can share the same Service impl when we use multiple inheritance
class  ModuleApi: public virtual restbed::Service
{
public:
	ModuleApi();
	~ModuleApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// Connect to the azure IoT Hub as a module using the environment variables
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectFromEnvironmentTransportTypeResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectFromEnvironmentTransportTypeResource();
    virtual ~ModuleApiModuleConnectFromEnvironmentTransportTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Connect to the azure IoT Hub as a module
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectTransportTypeResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectTransportTypeResource();
    virtual ~ModuleApiModuleConnectTransportTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// call the given method on the given device
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource();
    virtual ~ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Disconnect the module
/// </summary>
/// <remarks>
/// Disconnects from Azure IoTHub service.  More specifically, closes all connections and cleans up all resources for the active connection
/// </remarks>
class  ModuleApiModuleConnectionIdDisconnectResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdDisconnectResource();
    virtual ~ModuleApiModuleConnectionIdDisconnectResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Enable input messages
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdEnableInputMessagesResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdEnableInputMessagesResource();
    virtual ~ModuleApiModuleConnectionIdEnableInputMessagesResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Enable methods
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdEnableMethodsResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdEnableMethodsResource();
    virtual ~ModuleApiModuleConnectionIdEnableMethodsResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Enable module twins
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdEnableTwinResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdEnableTwinResource();
    virtual ~ModuleApiModuleConnectionIdEnableTwinResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Send an event
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdEventResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdEventResource();
    virtual ~ModuleApiModuleConnectionIdEventResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Wait for a message on a module input
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdInputMessageInputNameResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdInputMessageInputNameResource();
    virtual ~ModuleApiModuleConnectionIdInputMessageInputNameResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// call the given method on the given module
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource();
    virtual ~ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Send an event to a module output
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdOutputEventOutputNameResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdOutputEventOutputNameResource();
    virtual ~ModuleApiModuleConnectionIdOutputEventOutputNameResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Wait for a method call, verify the request, and return the response.
/// </summary>
/// <remarks>
/// This is a workaround to deal with SDKs that only have method call operations that are sync.  This function responds to the method with the payload of this function, and then returns the method parameters.  Real-world implemenatations would never do this, but this is the only same way to write our test code right now (because the method handlers for C, Java, and probably Python all return the method response instead of supporting an async method call)
/// </remarks>
class  ModuleApiModuleConnectionIdRoundtripMethodCallMethodNameResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdRoundtripMethodCallMethodNameResource();
    virtual ~ModuleApiModuleConnectionIdRoundtripMethodCallMethodNameResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Wait for the next desired property patch
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdTwinDesiredPropPatchResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdTwinDesiredPropPatchResource();
    virtual ~ModuleApiModuleConnectionIdTwinDesiredPropPatchResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get the device twin
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  ModuleApiModuleConnectionIdTwinResource: public restbed::Resource
{
public:
	ModuleApiModuleConnectionIdTwinResource();
    virtual ~ModuleApiModuleConnectionIdTwinResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void PATCH_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* ModuleApi_H_ */

