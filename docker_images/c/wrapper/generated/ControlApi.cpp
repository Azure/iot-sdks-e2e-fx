/**
 * Azure IOT End-to-End Test Wrapper Rest Api
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "ControlApi.h"
// added 2 lines in merge
#include "ControlGlue.h"
ControlGlue control_glue;

namespace io {
namespace swagger {
namespace server {
namespace api {

// removed namespace in merge
// using namespace io::swagger::server::model;

ControlApi::ControlApi() {
	std::shared_ptr<ControlApiControlCleanupResource> spControlApiControlCleanupResource = std::make_shared<ControlApiControlCleanupResource>();
	this->publish(spControlApiControlCleanupResource);

	std::shared_ptr<ControlApiControlCapabilitiesResource> spControlApiControlCapabilitiesResource = std::make_shared<ControlApiControlCapabilitiesResource>();
	this->publish(spControlApiControlCapabilitiesResource);

	std::shared_ptr<ControlApiControlMessageResource> spControlApiControlMessageResource = std::make_shared<ControlApiControlMessageResource>();
	this->publish(spControlApiControlMessageResource);

	std::shared_ptr<ControlApiControlCommandResource> spControlApiControlCommandResource = std::make_shared<ControlApiControlCommandResource>();
	this->publish(spControlApiControlCommandResource);

	std::shared_ptr<ControlApiControlFlagsResource> spControlApiControlFlagsResource = std::make_shared<ControlApiControlFlagsResource>();
	this->publish(spControlApiControlFlagsResource);

}

ControlApi::~ControlApi() {}

void ControlApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");

	this->start(settings);
}

void ControlApi::stopService() {
	this->stop();
}

ControlApiControlCleanupResource::ControlApiControlCleanupResource()
{
	this->set_path("/control/cleanup/");
	this->set_method_handler("PUT",
		std::bind(&ControlApiControlCleanupResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ControlApiControlCleanupResource::~ControlApiControlCleanupResource()
{
}

void ControlApiControlCleanupResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

    // Added 1 line in merge
    control_glue.CleanupResources();

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ControlApiControlCapabilitiesResource::ControlApiControlCapabilitiesResource()
{
	this->set_path("/control/capabilities/");
	this->set_method_handler("GET",
		std::bind(&ControlApiControlCapabilitiesResource::GET_method_handler, this,
			std::placeholders::_1));
}

ControlApiControlCapabilitiesResource::~ControlApiControlCapabilitiesResource()
{
}

void ControlApiControlCapabilitiesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


    // Added 1 line in merge
    std::string result = control_glue.GetCapabilities();


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
                // Changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}



ControlApiControlMessageResource::ControlApiControlMessageResource()
{
	this->set_path("/control/message/");
	this->set_method_handler("PUT",
		std::bind(&ControlApiControlMessageResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ControlApiControlMessageResource::~ControlApiControlMessageResource()
{
}

void ControlApiControlMessageResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */
			// Added 1 line in merge
			control_glue.PrintMessage(requestBody.c_str());

			if (status_code == 200) {
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



ControlApiControlCommandResource::ControlApiControlCommandResource()
{
	this->set_path("/control/command/");
	this->set_method_handler("PUT",
		std::bind(&ControlApiControlCommandResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ControlApiControlCommandResource::~ControlApiControlCommandResource()
{
}

void ControlApiControlCommandResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string cmd = request->get_query_parameter("cmd", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ControlApiControlFlagsResource::ControlApiControlFlagsResource()
{
	this->set_path("/control/flags/");
	this->set_method_handler("PUT",
		std::bind(&ControlApiControlFlagsResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ControlApiControlFlagsResource::~ControlApiControlFlagsResource()
{
}

void ControlApiControlFlagsResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}




}
}
}
}

