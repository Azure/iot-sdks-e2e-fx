/**
 * Azure IOT End-to-End Test Wrapper Rest Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
// added 2 lines in merge
#include <iostream>
#include <thread>

#include "DeviceApi.h"

// Added 2 lines in merge 
#include "DeviceGlue.h"
DeviceGlue device_glue;

namespace io {
namespace swagger {
namespace server {
namespace api {

// removed namespace in merge
// using namespace io::swagger::server::model;

DeviceApi::DeviceApi() {
	std::shared_ptr<DeviceApiDeviceConnectTransportTypeResource> spDeviceApiDeviceConnectTransportTypeResource = std::make_shared<DeviceApiDeviceConnectTransportTypeResource>();
	this->publish(spDeviceApiDeviceConnectTransportTypeResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdConnect2Resource> spDeviceApiDeviceConnectionIdConnect2Resource = std::make_shared<DeviceApiDeviceConnectionIdConnect2Resource>();
	this->publish(spDeviceApiDeviceConnectionIdConnect2Resource);

	std::shared_ptr<DeviceApiDeviceCreateFromConnectionStringTransportTypeResource> spDeviceApiDeviceCreateFromConnectionStringTransportTypeResource = std::make_shared<DeviceApiDeviceCreateFromConnectionStringTransportTypeResource>();
	this->publish(spDeviceApiDeviceCreateFromConnectionStringTransportTypeResource);

	std::shared_ptr<DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource> spDeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource = std::make_shared<DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource>();
	this->publish(spDeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource);

	std::shared_ptr<DeviceApiDeviceCreateFromX509TransportTypeResource> spDeviceApiDeviceCreateFromX509TransportTypeResource = std::make_shared<DeviceApiDeviceCreateFromX509TransportTypeResource>();
	this->publish(spDeviceApiDeviceCreateFromX509TransportTypeResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdDestroyResource> spDeviceApiDeviceConnectionIdDestroyResource = std::make_shared<DeviceApiDeviceConnectionIdDestroyResource>();
	this->publish(spDeviceApiDeviceConnectionIdDestroyResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdDisconnectResource> spDeviceApiDeviceConnectionIdDisconnectResource = std::make_shared<DeviceApiDeviceConnectionIdDisconnectResource>();
	this->publish(spDeviceApiDeviceConnectionIdDisconnectResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdDisconnect2Resource> spDeviceApiDeviceConnectionIdDisconnect2Resource = std::make_shared<DeviceApiDeviceConnectionIdDisconnect2Resource>();
	this->publish(spDeviceApiDeviceConnectionIdDisconnect2Resource);

	std::shared_ptr<DeviceApiDeviceConnectionIdEnableC2dMessagesResource> spDeviceApiDeviceConnectionIdEnableC2dMessagesResource = std::make_shared<DeviceApiDeviceConnectionIdEnableC2dMessagesResource>();
	this->publish(spDeviceApiDeviceConnectionIdEnableC2dMessagesResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdEnableMethodsResource> spDeviceApiDeviceConnectionIdEnableMethodsResource = std::make_shared<DeviceApiDeviceConnectionIdEnableMethodsResource>();
	this->publish(spDeviceApiDeviceConnectionIdEnableMethodsResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdEnableTwinResource> spDeviceApiDeviceConnectionIdEnableTwinResource = std::make_shared<DeviceApiDeviceConnectionIdEnableTwinResource>();
	this->publish(spDeviceApiDeviceConnectionIdEnableTwinResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdConnectionStatusResource> spDeviceApiDeviceConnectionIdConnectionStatusResource = std::make_shared<DeviceApiDeviceConnectionIdConnectionStatusResource>();
	this->publish(spDeviceApiDeviceConnectionIdConnectionStatusResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdStorageInfoForBlobResource> spDeviceApiDeviceConnectionIdStorageInfoForBlobResource = std::make_shared<DeviceApiDeviceConnectionIdStorageInfoForBlobResource>();
	this->publish(spDeviceApiDeviceConnectionIdStorageInfoForBlobResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdTwinResource> spDeviceApiDeviceConnectionIdTwinResource = std::make_shared<DeviceApiDeviceConnectionIdTwinResource>();
	this->publish(spDeviceApiDeviceConnectionIdTwinResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdBlobUploadStatusResource> spDeviceApiDeviceConnectionIdBlobUploadStatusResource = std::make_shared<DeviceApiDeviceConnectionIdBlobUploadStatusResource>();
	this->publish(spDeviceApiDeviceConnectionIdBlobUploadStatusResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdReconnectResource> spDeviceApiDeviceConnectionIdReconnectResource = std::make_shared<DeviceApiDeviceConnectionIdReconnectResource>();
	this->publish(spDeviceApiDeviceConnectionIdReconnectResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdEventResource> spDeviceApiDeviceConnectionIdEventResource = std::make_shared<DeviceApiDeviceConnectionIdEventResource>();
	this->publish(spDeviceApiDeviceConnectionIdEventResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdC2dMessageResource> spDeviceApiDeviceConnectionIdC2dMessageResource = std::make_shared<DeviceApiDeviceConnectionIdC2dMessageResource>();
	this->publish(spDeviceApiDeviceConnectionIdC2dMessageResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdConnectionStatusChangeResource> spDeviceApiDeviceConnectionIdConnectionStatusChangeResource = std::make_shared<DeviceApiDeviceConnectionIdConnectionStatusChangeResource>();
	this->publish(spDeviceApiDeviceConnectionIdConnectionStatusChangeResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource> spDeviceApiDeviceConnectionIdTwinDesiredPropPatchResource = std::make_shared<DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource>();
	this->publish(spDeviceApiDeviceConnectionIdTwinDesiredPropPatchResource);

	std::shared_ptr<DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource> spDeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource = std::make_shared<DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource>();
	this->publish(spDeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource);

}

DeviceApi::~DeviceApi() {}

void DeviceApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");

	this->start(settings);
}

void DeviceApi::stopService() {
	this->stop();
}

DeviceApiDeviceConnectTransportTypeResource::DeviceApiDeviceConnectTransportTypeResource()
{
	this->set_path("/device/connect/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectTransportTypeResource::~DeviceApiDeviceConnectTransportTypeResource()
{
}

void DeviceApiDeviceConnectTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");

			// Getting the query params
			const std::string connectionString = request->get_query_parameter("connectionString", "");

			// Added 1 line in merge
			std::string result = device_glue.Connect(transportType.c_str(), connectionString, requestBody);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

		});
}



DeviceApiDeviceConnectionIdConnect2Resource::DeviceApiDeviceConnectionIdConnect2Resource()
{
	this->set_path("/device/{connectionId: .*}/connect2/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdConnect2Resource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdConnect2Resource::~DeviceApiDeviceConnectionIdConnect2Resource()
{
}

void DeviceApiDeviceConnectionIdConnect2Resource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceCreateFromConnectionStringTransportTypeResource::DeviceApiDeviceCreateFromConnectionStringTransportTypeResource()
{
	this->set_path("/device/createFromConnectionString/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceCreateFromConnectionStringTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceCreateFromConnectionStringTransportTypeResource::~DeviceApiDeviceCreateFromConnectionStringTransportTypeResource()
{
}

void DeviceApiDeviceCreateFromConnectionStringTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");

			// Getting the query params
			const std::string connectionString = request->get_query_parameter("connectionString", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource::DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource()
{
	this->set_path("/device/createFromSymmetricKey/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource::~DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource()
{
}

void DeviceApiDeviceCreateFromSymmetricKeyTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");
			const std::string deviceId = request->get_path_parameter("deviceId", "");

			// Getting the query params
			const std::string hostname = request->get_query_parameter("hostname", "");
			const std::string symmetricKey = request->get_query_parameter("symmetricKey", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceCreateFromX509TransportTypeResource::DeviceApiDeviceCreateFromX509TransportTypeResource()
{
	this->set_path("/device/createFromX509/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceCreateFromX509TransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceCreateFromX509TransportTypeResource::~DeviceApiDeviceCreateFromX509TransportTypeResource()
{
}

void DeviceApiDeviceCreateFromX509TransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



DeviceApiDeviceConnectionIdDestroyResource::DeviceApiDeviceConnectionIdDestroyResource()
{
	this->set_path("/device/{connectionId: .*}/destroy/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdDestroyResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdDestroyResource::~DeviceApiDeviceConnectionIdDestroyResource()
{
}

void DeviceApiDeviceConnectionIdDestroyResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdDisconnectResource::DeviceApiDeviceConnectionIdDisconnectResource()
{
	this->set_path("/device/{connectionId: .*}/disconnect/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdDisconnectResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdDisconnectResource::~DeviceApiDeviceConnectionIdDisconnectResource()
{
}

void DeviceApiDeviceConnectionIdDisconnectResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");


			// added 1 line in merge
			device_glue.Disconnect(connectionId);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdDisconnect2Resource::DeviceApiDeviceConnectionIdDisconnect2Resource()
{
	this->set_path("/device/{connectionId: .*}/disconnect2/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdDisconnect2Resource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdDisconnect2Resource::~DeviceApiDeviceConnectionIdDisconnect2Resource()
{
}

void DeviceApiDeviceConnectionIdDisconnect2Resource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdEnableC2dMessagesResource::DeviceApiDeviceConnectionIdEnableC2dMessagesResource()
{
	this->set_path("/device/{connectionId: .*}/enableC2dMessages/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdEnableC2dMessagesResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdEnableC2dMessagesResource::~DeviceApiDeviceConnectionIdEnableC2dMessagesResource()
{
}

void DeviceApiDeviceConnectionIdEnableC2dMessagesResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// added 1 line in merge
			device_glue.EnableC2dMessages(connectionId);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdEnableMethodsResource::DeviceApiDeviceConnectionIdEnableMethodsResource()
{
	this->set_path("/device/{connectionId: .*}/enableMethods/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdEnableMethodsResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdEnableMethodsResource::~DeviceApiDeviceConnectionIdEnableMethodsResource()
{
}

void DeviceApiDeviceConnectionIdEnableMethodsResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");


			// Added 1 line in merge
			device_glue.EnableMethods(connectionId);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdEnableTwinResource::DeviceApiDeviceConnectionIdEnableTwinResource()
{
	this->set_path("/device/{connectionId: .*}/enableTwin/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdEnableTwinResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdEnableTwinResource::~DeviceApiDeviceConnectionIdEnableTwinResource()
{
}

void DeviceApiDeviceConnectionIdEnableTwinResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// added 1 line in merge
			device_glue.EnableTwin(connectionId);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdConnectionStatusResource::DeviceApiDeviceConnectionIdConnectionStatusResource()
{
	this->set_path("/device/{connectionId: .*}/connectionStatus/");
	this->set_method_handler("GET",
		std::bind(&DeviceApiDeviceConnectionIdConnectionStatusResource::GET_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdConnectionStatusResource::~DeviceApiDeviceConnectionIdConnectionStatusResource()
{
}

void DeviceApiDeviceConnectionIdConnectionStatusResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdStorageInfoForBlobResource::DeviceApiDeviceConnectionIdStorageInfoForBlobResource()
{
	this->set_path("/device/{connectionId: .*}/storageInfoForBlob/");
	this->set_method_handler("GET",
		std::bind(&DeviceApiDeviceConnectionIdStorageInfoForBlobResource::GET_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdStorageInfoForBlobResource::~DeviceApiDeviceConnectionIdStorageInfoForBlobResource()
{
}

void DeviceApiDeviceConnectionIdStorageInfoForBlobResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Getting the query params
			const std::string blobName = request->get_query_parameter("blobName", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdTwinResource::DeviceApiDeviceConnectionIdTwinResource()
{
	this->set_path("/device/{connectionId: .*}/twin/");
	this->set_method_handler("GET",
		std::bind(&DeviceApiDeviceConnectionIdTwinResource::GET_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&DeviceApiDeviceConnectionIdTwinResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdTwinResource::~DeviceApiDeviceConnectionIdTwinResource()
{
}

void DeviceApiDeviceConnectionIdTwinResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			std::string result = device_glue.GetTwin(connectionId);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// Changed on parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}

void DeviceApiDeviceConnectionIdTwinResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			device_glue.SendTwinPatch(connectionId, requestBody);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}


DeviceApiDeviceConnectionIdBlobUploadStatusResource::DeviceApiDeviceConnectionIdBlobUploadStatusResource()
{
	this->set_path("/device/{connectionId: .*}/blobUploadStatus/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdBlobUploadStatusResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdBlobUploadStatusResource::~DeviceApiDeviceConnectionIdBlobUploadStatusResource()
{
}

void DeviceApiDeviceConnectionIdBlobUploadStatusResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Getting the query params
			const std::string correlationId = request->get_query_parameter("correlationId", "");
            // added default in merge
			const bool isSuccess = request->get_query_parameter("isSuccess", false );
			const std::string statusCode = request->get_query_parameter("statusCode", "");
			const std::string statusDescription = request->get_query_parameter("statusDescription", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdReconnectResource::DeviceApiDeviceConnectionIdReconnectResource()
{
	this->set_path("/device/{connectionId: .*}/reconnect/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdReconnectResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdReconnectResource::~DeviceApiDeviceConnectionIdReconnectResource()
{
}

void DeviceApiDeviceConnectionIdReconnectResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Getting the query params
			//  Added parameter in merge
			const bool forceRenewPassword = request->get_query_parameter("forceRenewPassword", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdEventResource::DeviceApiDeviceConnectionIdEventResource()
{
	this->set_path("/device/{connectionId: .*}/event/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdEventResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdEventResource::~DeviceApiDeviceConnectionIdEventResource()
{
}

void DeviceApiDeviceConnectionIdEventResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
            // replaced 1 line in merge
			std::string requestBody((const char *) body.data(), body.size());
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			device_glue.SendEvent(connectionId, requestBody);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



DeviceApiDeviceConnectionIdC2dMessageResource::DeviceApiDeviceConnectionIdC2dMessageResource()
{
	this->set_path("/device/{connectionId: .*}/c2dMessage/");
	this->set_method_handler("GET",
		std::bind(&DeviceApiDeviceConnectionIdC2dMessageResource::GET_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdC2dMessageResource::~DeviceApiDeviceConnectionIdC2dMessageResource()
{
}

void DeviceApiDeviceConnectionIdC2dMessageResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			std::string result = device_glue.WaitForC2dMessage(connectionId);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// changed one parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdConnectionStatusChangeResource::DeviceApiDeviceConnectionIdConnectionStatusChangeResource()
{
	this->set_path("/device/{connectionId: .*}/connectionStatusChange/");
	this->set_method_handler("GET",
		std::bind(&DeviceApiDeviceConnectionIdConnectionStatusChangeResource::GET_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdConnectionStatusChangeResource::~DeviceApiDeviceConnectionIdConnectionStatusChangeResource()
{
}

void DeviceApiDeviceConnectionIdConnectionStatusChangeResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Getting the query params
			const std::string connectionStatus = request->get_query_parameter("connectionStatus", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource::DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource()
{
	this->set_path("/device/{connectionId: .*}/twinDesiredPropPatch/");
	this->set_method_handler("GET",
		std::bind(&DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource::GET_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource::~DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource()
{
}

void DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// added 1 line in merge
			std::string result = device_glue.WaitForDesiredPropertyPatch(connectionId);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// Changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}



DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource::DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource()
{
	this->set_path("/device/{connectionId: .*}/waitForMethodAndReturnResponse/{methodName: .*}/");
	this->set_method_handler("PUT",
		std::bind(&DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource::PUT_method_handler, this,
			std::placeholders::_1));
}

DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource::~DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource()
{
}

void DeviceApiDeviceConnectionIdWaitForMethodAndReturnResponseMethodNameResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			const std::string methodName = request->get_path_parameter("methodName", "");

			// added 1 line in merge
			device_glue.WaitForMethodAndReturnResponse(connectionId, methodName, requestBody);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}




}
}
}
}

