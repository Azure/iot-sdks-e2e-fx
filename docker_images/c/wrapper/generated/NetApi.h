/**
 * Azure IOT End-to-End Test Wrapper Rest Api
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * NetApi.h
 *
 * 
 */

#ifndef NetApi_H_
#define NetApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include <string>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

class  NetApi: public restbed::Service
{
public:
	NetApi();
	~NetApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// Simulate a network disconnection
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  NetApiNetDisconnectDisconnectTypeResource: public restbed::Resource
{
public:
	NetApiNetDisconnectDisconnectTypeResource();
    virtual ~NetApiNetDisconnectDisconnectTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Simulate a disconnect after the next C2D transfer
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  NetApiNetDisconnectAfterC2dDisconnectTypeResource: public restbed::Resource
{
public:
	NetApiNetDisconnectAfterC2dDisconnectTypeResource();
    virtual ~NetApiNetDisconnectAfterC2dDisconnectTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Simulate a disconnect after the next D2C transfer
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  NetApiNetDisconnectAfterD2cDisconnectTypeResource: public restbed::Resource
{
public:
	NetApiNetDisconnectAfterD2cDisconnectTypeResource();
    virtual ~NetApiNetDisconnectAfterD2cDisconnectTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Reconnect the network after a simulated network disconnection
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  NetApiNetReconnectResource: public restbed::Resource
{
public:
	NetApiNetReconnectResource();
    virtual ~NetApiNetReconnectResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Set destination for net disconnect ops
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  NetApiNetSetDestinationIpTransportTypeResource: public restbed::Resource
{
public:
	NetApiNetSetDestinationIpTransportTypeResource();
    virtual ~NetApiNetSetDestinationIpTransportTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* NetApi_H_ */

