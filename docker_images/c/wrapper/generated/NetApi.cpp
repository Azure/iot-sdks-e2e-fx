/**
 * Azure IOT End-to-End Test Wrapper Rest Api
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "NetApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

NetApi::NetApi() {
	std::shared_ptr<NetApiNetDisconnectDisconnectTypeResource> spNetApiNetDisconnectDisconnectTypeResource = std::make_shared<NetApiNetDisconnectDisconnectTypeResource>();
	this->publish(spNetApiNetDisconnectDisconnectTypeResource);

	std::shared_ptr<NetApiNetDisconnectAfterC2dDisconnectTypeResource> spNetApiNetDisconnectAfterC2dDisconnectTypeResource = std::make_shared<NetApiNetDisconnectAfterC2dDisconnectTypeResource>();
	this->publish(spNetApiNetDisconnectAfterC2dDisconnectTypeResource);

	std::shared_ptr<NetApiNetDisconnectAfterD2cDisconnectTypeResource> spNetApiNetDisconnectAfterD2cDisconnectTypeResource = std::make_shared<NetApiNetDisconnectAfterD2cDisconnectTypeResource>();
	this->publish(spNetApiNetDisconnectAfterD2cDisconnectTypeResource);

	std::shared_ptr<NetApiNetReconnectResource> spNetApiNetReconnectResource = std::make_shared<NetApiNetReconnectResource>();
	this->publish(spNetApiNetReconnectResource);

	std::shared_ptr<NetApiNetSetDestinationIpTransportTypeResource> spNetApiNetSetDestinationIpTransportTypeResource = std::make_shared<NetApiNetSetDestinationIpTransportTypeResource>();
	this->publish(spNetApiNetSetDestinationIpTransportTypeResource);

}

NetApi::~NetApi() {}

void NetApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");

	this->start(settings);
}

void NetApi::stopService() {
	this->stop();
}

NetApiNetDisconnectDisconnectTypeResource::NetApiNetDisconnectDisconnectTypeResource()
{
	this->set_path("/net/disconnect/{disconnectType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&NetApiNetDisconnectDisconnectTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

NetApiNetDisconnectDisconnectTypeResource::~NetApiNetDisconnectDisconnectTypeResource()
{
}

void NetApiNetDisconnectDisconnectTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string disconnectType = request->get_path_parameter("disconnectType", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



NetApiNetDisconnectAfterC2dDisconnectTypeResource::NetApiNetDisconnectAfterC2dDisconnectTypeResource()
{
	this->set_path("/net/disconnectAfterC2d/{disconnectType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&NetApiNetDisconnectAfterC2dDisconnectTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

NetApiNetDisconnectAfterC2dDisconnectTypeResource::~NetApiNetDisconnectAfterC2dDisconnectTypeResource()
{
}

void NetApiNetDisconnectAfterC2dDisconnectTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string disconnectType = request->get_path_parameter("disconnectType", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



NetApiNetDisconnectAfterD2cDisconnectTypeResource::NetApiNetDisconnectAfterD2cDisconnectTypeResource()
{
	this->set_path("/net/disconnectAfterD2c/{disconnectType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&NetApiNetDisconnectAfterD2cDisconnectTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

NetApiNetDisconnectAfterD2cDisconnectTypeResource::~NetApiNetDisconnectAfterD2cDisconnectTypeResource()
{
}

void NetApiNetDisconnectAfterD2cDisconnectTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string disconnectType = request->get_path_parameter("disconnectType", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



NetApiNetReconnectResource::NetApiNetReconnectResource()
{
	this->set_path("/net/reconnect/");
	this->set_method_handler("PUT",
		std::bind(&NetApiNetReconnectResource::PUT_method_handler, this,
			std::placeholders::_1));
}

NetApiNetReconnectResource::~NetApiNetReconnectResource()
{
}

void NetApiNetReconnectResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}



NetApiNetSetDestinationIpTransportTypeResource::NetApiNetSetDestinationIpTransportTypeResource()
{
	this->set_path("/net/setDestination/{ip: .*}/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&NetApiNetSetDestinationIpTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

NetApiNetSetDestinationIpTransportTypeResource::~NetApiNetSetDestinationIpTransportTypeResource()
{
}

void NetApiNetSetDestinationIpTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string ip = request->get_path_parameter("ip", "");
			const std::string transportType = request->get_path_parameter("transportType", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

