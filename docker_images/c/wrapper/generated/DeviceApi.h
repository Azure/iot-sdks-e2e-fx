/**
 * Azure IOT End-to-End Test Wrapper Rest Api
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DeviceApi.h
 *
 *
 */

#ifndef DeviceApi_H_
#define DeviceApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

// Removed 4 lines in merge
// #include "Certificate.h"
// #include "ConnectResponse.h"
// #include "Object.h"
// #include "RoundtripMethodCallBody.h"
#include <string>

namespace io {
namespace swagger {
namespace server {
namespace api {

// removed namespace in merge
using namespace io::swagger::server::model;

// made virtual in merge
class  DeviceApi: public virtual restbed::Service
{
public:
	DeviceApi();
	~DeviceApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// Connect to the azure IoT Hub as a device
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectTransportTypeResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectTransportTypeResource();
    virtual ~DeviceApiDeviceConnectTransportTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Connect the device
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdConnect2Resource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdConnect2Resource();
    virtual ~DeviceApiDeviceConnectionIdConnect2Resource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create a device client from a connection string
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceCreateFromConnectionStringTransportTypeResource: public restbed::Resource
{
public:
	DeviceApiDeviceCreateFromConnectionStringTransportTypeResource();
    virtual ~DeviceApiDeviceCreateFromConnectionStringTransportTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Create a device client from X509 credentials
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceCreateFromX509TransportTypeResource: public restbed::Resource
{
public:
	DeviceApiDeviceCreateFromX509TransportTypeResource();
    virtual ~DeviceApiDeviceCreateFromX509TransportTypeResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Disconnect and destroy the device client
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdDestroyResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdDestroyResource();
    virtual ~DeviceApiDeviceConnectionIdDestroyResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Disconnect the device
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdDisconnectResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdDisconnectResource();
    virtual ~DeviceApiDeviceConnectionIdDisconnectResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Disconnect the device
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdDisconnect2Resource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdDisconnect2Resource();
    virtual ~DeviceApiDeviceConnectionIdDisconnect2Resource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Enable c2d messages
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdEnableC2dMessagesResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdEnableC2dMessagesResource();
    virtual ~DeviceApiDeviceConnectionIdEnableC2dMessagesResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Enable methods
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdEnableMethodsResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdEnableMethodsResource();
    virtual ~DeviceApiDeviceConnectionIdEnableMethodsResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Enable device twins
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdEnableTwinResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdEnableTwinResource();
    virtual ~DeviceApiDeviceConnectionIdEnableTwinResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// get the current connection status
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdConnectionStatusResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdConnectionStatusResource();
    virtual ~DeviceApiDeviceConnectionIdConnectionStatusResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Get the device twin
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdTwinResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdTwinResource();
    virtual ~DeviceApiDeviceConnectionIdTwinResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void PATCH_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Reconnect the device
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdReconnectResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdReconnectResource();
    virtual ~DeviceApiDeviceConnectionIdReconnectResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Wait for a method call, verify the request, and return the response.
/// </summary>
/// <remarks>
/// This is a workaround to deal with SDKs that only have method call operations that are sync.  This function responds to the method with the payload of this function, and then returns the method parameters.  Real-world implemenatations would never do this, but this is the only same way to write our test code right now (because the method handlers for C, Java, and probably Python all return the method response instead of supporting an async method call)
/// </remarks>
class  DeviceApiDeviceConnectionIdRoundtripMethodCallMethodNameResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdRoundtripMethodCallMethodNameResource();
    virtual ~DeviceApiDeviceConnectionIdRoundtripMethodCallMethodNameResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Send an event
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdEventResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdEventResource();
    virtual ~DeviceApiDeviceConnectionIdEventResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Wait for a c2d message
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdC2dMessageResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdC2dMessageResource();
    virtual ~DeviceApiDeviceConnectionIdC2dMessageResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// wait for the current connection status to change and return the changed status
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdConnectionStatusChangeResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdConnectionStatusChangeResource();
    virtual ~DeviceApiDeviceConnectionIdConnectionStatusChangeResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Wait for the next desired property patch
/// </summary>
/// <remarks>
///
/// </remarks>
class  DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource: public restbed::Resource
{
public:
	DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource();
    virtual ~DeviceApiDeviceConnectionIdTwinDesiredPropPatchResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* DeviceApi_H_ */

