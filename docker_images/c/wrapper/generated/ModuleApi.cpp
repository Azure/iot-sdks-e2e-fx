/**
 * Azure IOT End-to-End Test Wrapper Rest Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.2.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
// added 2 lines in merge
#include <iostream>
#include <thread>

#include "ModuleApi.h"

// Added 2 lines in merge
#include "ModuleGlue.h"
ModuleGlue module_glue;

namespace io {
namespace swagger {
namespace server {
namespace api {

// Removed namespace in merge
// using namespace io::swagger::server::model;

ModuleApi::ModuleApi() {
	std::shared_ptr<ModuleApiModuleConnectTransportTypeResource> spModuleApiModuleConnectTransportTypeResource = std::make_shared<ModuleApiModuleConnectTransportTypeResource>();
	this->publish(spModuleApiModuleConnectTransportTypeResource);

	std::shared_ptr<ModuleApiModuleConnectionIdConnect2Resource> spModuleApiModuleConnectionIdConnect2Resource = std::make_shared<ModuleApiModuleConnectionIdConnect2Resource>();
	this->publish(spModuleApiModuleConnectionIdConnect2Resource);

	std::shared_ptr<ModuleApiModuleConnectFromEnvironmentTransportTypeResource> spModuleApiModuleConnectFromEnvironmentTransportTypeResource = std::make_shared<ModuleApiModuleConnectFromEnvironmentTransportTypeResource>();
	this->publish(spModuleApiModuleConnectFromEnvironmentTransportTypeResource);

	std::shared_ptr<ModuleApiModuleCreateFromConnectionstringTransportTypeResource> spModuleApiModuleCreateFromConnectionstringTransportTypeResource = std::make_shared<ModuleApiModuleCreateFromConnectionstringTransportTypeResource>();
	this->publish(spModuleApiModuleCreateFromConnectionstringTransportTypeResource);

	std::shared_ptr<ModuleApiModuleCreateFromEnvironmentTransportTypeResource> spModuleApiModuleCreateFromEnvironmentTransportTypeResource = std::make_shared<ModuleApiModuleCreateFromEnvironmentTransportTypeResource>();
	this->publish(spModuleApiModuleCreateFromEnvironmentTransportTypeResource);

	std::shared_ptr<ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource> spModuleApiModuleCreateFromSymmetricKeyTransportTypeResource = std::make_shared<ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource>();
	this->publish(spModuleApiModuleCreateFromSymmetricKeyTransportTypeResource);

	std::shared_ptr<ModuleApiModuleCreateFromX509TransportTypeResource> spModuleApiModuleCreateFromX509TransportTypeResource = std::make_shared<ModuleApiModuleCreateFromX509TransportTypeResource>();
	this->publish(spModuleApiModuleCreateFromX509TransportTypeResource);

	std::shared_ptr<ModuleApiModuleConnectionIdDestroyResource> spModuleApiModuleConnectionIdDestroyResource = std::make_shared<ModuleApiModuleConnectionIdDestroyResource>();
	this->publish(spModuleApiModuleConnectionIdDestroyResource);

	std::shared_ptr<ModuleApiModuleConnectionIdDisconnectResource> spModuleApiModuleConnectionIdDisconnectResource = std::make_shared<ModuleApiModuleConnectionIdDisconnectResource>();
	this->publish(spModuleApiModuleConnectionIdDisconnectResource);

	std::shared_ptr<ModuleApiModuleConnectionIdDisconnect2Resource> spModuleApiModuleConnectionIdDisconnect2Resource = std::make_shared<ModuleApiModuleConnectionIdDisconnect2Resource>();
	this->publish(spModuleApiModuleConnectionIdDisconnect2Resource);

	std::shared_ptr<ModuleApiModuleConnectionIdEnableInputMessagesResource> spModuleApiModuleConnectionIdEnableInputMessagesResource = std::make_shared<ModuleApiModuleConnectionIdEnableInputMessagesResource>();
	this->publish(spModuleApiModuleConnectionIdEnableInputMessagesResource);

	std::shared_ptr<ModuleApiModuleConnectionIdEnableMethodsResource> spModuleApiModuleConnectionIdEnableMethodsResource = std::make_shared<ModuleApiModuleConnectionIdEnableMethodsResource>();
	this->publish(spModuleApiModuleConnectionIdEnableMethodsResource);

	std::shared_ptr<ModuleApiModuleConnectionIdEnableTwinResource> spModuleApiModuleConnectionIdEnableTwinResource = std::make_shared<ModuleApiModuleConnectionIdEnableTwinResource>();
	this->publish(spModuleApiModuleConnectionIdEnableTwinResource);

	std::shared_ptr<ModuleApiModuleConnectionIdConnectionStatusResource> spModuleApiModuleConnectionIdConnectionStatusResource = std::make_shared<ModuleApiModuleConnectionIdConnectionStatusResource>();
	this->publish(spModuleApiModuleConnectionIdConnectionStatusResource);

	std::shared_ptr<ModuleApiModuleConnectionIdTwinResource> spModuleApiModuleConnectionIdTwinResource = std::make_shared<ModuleApiModuleConnectionIdTwinResource>();
	this->publish(spModuleApiModuleConnectionIdTwinResource);

	std::shared_ptr<ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource> spModuleApiModuleConnectionIdDeviceMethodDeviceIdResource = std::make_shared<ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource>();
	this->publish(spModuleApiModuleConnectionIdDeviceMethodDeviceIdResource);

	std::shared_ptr<ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource> spModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource = std::make_shared<ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource>();
	this->publish(spModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource);

	std::shared_ptr<ModuleApiModuleConnectionIdReconnectResource> spModuleApiModuleConnectionIdReconnectResource = std::make_shared<ModuleApiModuleConnectionIdReconnectResource>();
	this->publish(spModuleApiModuleConnectionIdReconnectResource);

	std::shared_ptr<ModuleApiModuleConnectionIdEventResource> spModuleApiModuleConnectionIdEventResource = std::make_shared<ModuleApiModuleConnectionIdEventResource>();
	this->publish(spModuleApiModuleConnectionIdEventResource);

	std::shared_ptr<ModuleApiModuleConnectionIdOutputEventOutputNameResource> spModuleApiModuleConnectionIdOutputEventOutputNameResource = std::make_shared<ModuleApiModuleConnectionIdOutputEventOutputNameResource>();
	this->publish(spModuleApiModuleConnectionIdOutputEventOutputNameResource);

	std::shared_ptr<ModuleApiModuleConnectionIdConnectionStatusChangeResource> spModuleApiModuleConnectionIdConnectionStatusChangeResource = std::make_shared<ModuleApiModuleConnectionIdConnectionStatusChangeResource>();
	this->publish(spModuleApiModuleConnectionIdConnectionStatusChangeResource);

	std::shared_ptr<ModuleApiModuleConnectionIdTwinDesiredPropPatchResource> spModuleApiModuleConnectionIdTwinDesiredPropPatchResource = std::make_shared<ModuleApiModuleConnectionIdTwinDesiredPropPatchResource>();
	this->publish(spModuleApiModuleConnectionIdTwinDesiredPropPatchResource);

	std::shared_ptr<ModuleApiModuleConnectionIdInputMessageInputNameResource> spModuleApiModuleConnectionIdInputMessageInputNameResource = std::make_shared<ModuleApiModuleConnectionIdInputMessageInputNameResource>();
	this->publish(spModuleApiModuleConnectionIdInputMessageInputNameResource);

	std::shared_ptr<ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource> spModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource = std::make_shared<ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource>();
	this->publish(spModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource);

}

ModuleApi::~ModuleApi() {}

void ModuleApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	// Added 1 line in merge
	settings->set_worker_limit(10);

	this->start(settings);
}

void ModuleApi::stopService() {
	this->stop();
}

ModuleApiModuleConnectTransportTypeResource::ModuleApiModuleConnectTransportTypeResource()
{
	this->set_path("/module/connect/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectTransportTypeResource::~ModuleApiModuleConnectTransportTypeResource()
{
}

void ModuleApiModuleConnectTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");

			// Getting the query params
			const std::string connectionString = request->get_query_parameter("connectionString", "");

			// added 1 line in merge
			std::string result = module_glue.Connect(transportType.c_str(), connectionString, requestBody);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

		});
}



ModuleApiModuleConnectionIdConnect2Resource::ModuleApiModuleConnectionIdConnect2Resource()
{
	this->set_path("/module/{connectionId: .*}/connect2/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdConnect2Resource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdConnect2Resource::~ModuleApiModuleConnectionIdConnect2Resource()
{
}

void ModuleApiModuleConnectionIdConnect2Resource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectFromEnvironmentTransportTypeResource::ModuleApiModuleConnectFromEnvironmentTransportTypeResource()
{
	this->set_path("/module/connectFromEnvironment/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectFromEnvironmentTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectFromEnvironmentTransportTypeResource::~ModuleApiModuleConnectFromEnvironmentTransportTypeResource()
{
}

void ModuleApiModuleConnectFromEnvironmentTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");

			// Added 1 line in merge
			std::string result = module_glue.ConnectFromEnvironment(transportType.c_str());


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// Changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleCreateFromConnectionstringTransportTypeResource::ModuleApiModuleCreateFromConnectionstringTransportTypeResource()
{
	this->set_path("/module/createFromConnectionstring/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleCreateFromConnectionstringTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleCreateFromConnectionstringTransportTypeResource::~ModuleApiModuleCreateFromConnectionstringTransportTypeResource()
{
}

void ModuleApiModuleCreateFromConnectionstringTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");

			// Getting the query params
			const std::string connectionString = request->get_query_parameter("connectionString", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



ModuleApiModuleCreateFromEnvironmentTransportTypeResource::ModuleApiModuleCreateFromEnvironmentTransportTypeResource()
{
	this->set_path("/module/createFromEnvironment/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleCreateFromEnvironmentTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleCreateFromEnvironmentTransportTypeResource::~ModuleApiModuleCreateFromEnvironmentTransportTypeResource()
{
}

void ModuleApiModuleCreateFromEnvironmentTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource::ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource()
{
	this->set_path("/module/createFromSymmetricKey/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource::~ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource()
{
}

void ModuleApiModuleCreateFromSymmetricKeyTransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");
			const std::string deviceId = request->get_path_parameter("deviceId", "");
			const std::string moduleId = request->get_path_parameter("moduleId", "");

			// Getting the query params
			const std::string hostname = request->get_query_parameter("hostname", "");
			const std::string symmetricKey = request->get_query_parameter("symmetricKey", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleCreateFromX509TransportTypeResource::ModuleApiModuleCreateFromX509TransportTypeResource()
{
	this->set_path("/module/createFromX509/{transportType: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleCreateFromX509TransportTypeResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleCreateFromX509TransportTypeResource::~ModuleApiModuleCreateFromX509TransportTypeResource()
{
}

void ModuleApiModuleCreateFromX509TransportTypeResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string transportType = request->get_path_parameter("transportType", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



ModuleApiModuleConnectionIdDestroyResource::ModuleApiModuleConnectionIdDestroyResource()
{
	this->set_path("/module/{connectionId: .*}/destroy/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdDestroyResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdDestroyResource::~ModuleApiModuleConnectionIdDestroyResource()
{
}

void ModuleApiModuleConnectionIdDestroyResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdDisconnectResource::ModuleApiModuleConnectionIdDisconnectResource()
{
	this->set_path("/module/{connectionId: .*}/disconnect/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdDisconnectResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdDisconnectResource::~ModuleApiModuleConnectionIdDisconnectResource()
{
}

void ModuleApiModuleConnectionIdDisconnectResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");


			// added 1 line in merge
			module_glue.Disconnect(connectionId);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdDisconnect2Resource::ModuleApiModuleConnectionIdDisconnect2Resource()
{
	this->set_path("/module/{connectionId: .*}/disconnect2/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdDisconnect2Resource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdDisconnect2Resource::~ModuleApiModuleConnectionIdDisconnect2Resource()
{
}

void ModuleApiModuleConnectionIdDisconnect2Resource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdEnableInputMessagesResource::ModuleApiModuleConnectionIdEnableInputMessagesResource()
{
	this->set_path("/module/{connectionId: .*}/enableInputMessages/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdEnableInputMessagesResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdEnableInputMessagesResource::~ModuleApiModuleConnectionIdEnableInputMessagesResource()
{
}

void ModuleApiModuleConnectionIdEnableInputMessagesResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");


			// added 1 line in merge
			module_glue.EnableInputMessages(connectionId);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdEnableMethodsResource::ModuleApiModuleConnectionIdEnableMethodsResource()
{
	this->set_path("/module/{connectionId: .*}/enableMethods/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdEnableMethodsResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdEnableMethodsResource::~ModuleApiModuleConnectionIdEnableMethodsResource()
{
}

void ModuleApiModuleConnectionIdEnableMethodsResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			module_glue.EnableMethods(connectionId);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdEnableTwinResource::ModuleApiModuleConnectionIdEnableTwinResource()
{
	this->set_path("/module/{connectionId: .*}/enableTwin/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdEnableTwinResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdEnableTwinResource::~ModuleApiModuleConnectionIdEnableTwinResource()
{
}

void ModuleApiModuleConnectionIdEnableTwinResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// added 1 line in merge
			module_glue.EnableTwin(connectionId);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdConnectionStatusResource::ModuleApiModuleConnectionIdConnectionStatusResource()
{
	this->set_path("/module/{connectionId: .*}/connectionStatus/");
	this->set_method_handler("GET",
		std::bind(&ModuleApiModuleConnectionIdConnectionStatusResource::GET_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdConnectionStatusResource::~ModuleApiModuleConnectionIdConnectionStatusResource()
{
}

void ModuleApiModuleConnectionIdConnectionStatusResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdTwinResource::ModuleApiModuleConnectionIdTwinResource()
{
	this->set_path("/module/{connectionId: .*}/twin/");
	this->set_method_handler("GET",
		std::bind(&ModuleApiModuleConnectionIdTwinResource::GET_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&ModuleApiModuleConnectionIdTwinResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdTwinResource::~ModuleApiModuleConnectionIdTwinResource()
{
}

void ModuleApiModuleConnectionIdTwinResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			std::string result = module_glue.GetTwin(connectionId);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// Changed on parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}

void ModuleApiModuleConnectionIdTwinResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			module_glue.SendTwinPatch(connectionId, requestBody);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}


ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource::ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource()
{
	this->set_path("/module/{connectionId: .*}/deviceMethod/{deviceId: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource::~ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource()
{
}

void ModuleApiModuleConnectionIdDeviceMethodDeviceIdResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			const std::string deviceId = request->get_path_parameter("deviceId", "");

			// Added 1 line in merge
			std::string result = module_glue.InvokeDeviceMethod(connectionId, deviceId, requestBody);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// Changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

		});
}



ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource::ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource()
{
	this->set_path("/module/{connectionId: .*}/moduleMethod/{deviceId: .*}/{moduleId: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource::~ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource()
{
}

void ModuleApiModuleConnectionIdModuleMethodDeviceIdModuleIdResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			const std::string deviceId = request->get_path_parameter("deviceId", "");
			const std::string moduleId = request->get_path_parameter("moduleId", "");

			// Added 1 line in merge
			std::string result = module_glue.InvokeModuleMethod(connectionId, deviceId, moduleId, requestBody);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

		});
}



ModuleApiModuleConnectionIdReconnectResource::ModuleApiModuleConnectionIdReconnectResource()
{
	this->set_path("/module/{connectionId: .*}/reconnect/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdReconnectResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdReconnectResource::~ModuleApiModuleConnectionIdReconnectResource()
{
}

void ModuleApiModuleConnectionIdReconnectResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Getting the query params
			// parameter added in merge
			const bool forceRenewPassword = request->get_query_parameter("forceRenewPassword", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdEventResource::ModuleApiModuleConnectionIdEventResource()
{
	this->set_path("/module/{connectionId: .*}/event/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdEventResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdEventResource::~ModuleApiModuleConnectionIdEventResource()
{
}

void ModuleApiModuleConnectionIdEventResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
            // replaced 1 line in merge
			std::string requestBody((const char *) body.data(), body.size());

			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Added 1 line in merge
			module_glue.SendEvent(connectionId, requestBody);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



ModuleApiModuleConnectionIdOutputEventOutputNameResource::ModuleApiModuleConnectionIdOutputEventOutputNameResource()
{
	this->set_path("/module/{connectionId: .*}/outputEvent/{outputName: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdOutputEventOutputNameResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdOutputEventOutputNameResource::~ModuleApiModuleConnectionIdOutputEventOutputNameResource()
{
}

void ModuleApiModuleConnectionIdOutputEventOutputNameResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
            // replaced 1 line in merge
			std::string requestBody((const char *) body.data(), body.size());
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			const std::string outputName = request->get_path_parameter("outputName", "");

			// added 1 line in merge
			module_glue.SendOutputEvent(connectionId, outputName, requestBody);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}



ModuleApiModuleConnectionIdConnectionStatusChangeResource::ModuleApiModuleConnectionIdConnectionStatusChangeResource()
{
	this->set_path("/module/{connectionId: .*}/connectionStatusChange/");
	this->set_method_handler("GET",
		std::bind(&ModuleApiModuleConnectionIdConnectionStatusChangeResource::GET_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdConnectionStatusChangeResource::~ModuleApiModuleConnectionIdConnectionStatusChangeResource()
{
}

void ModuleApiModuleConnectionIdConnectionStatusChangeResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// Getting the query params
			const std::string connectionStatus = request->get_query_parameter("connectionStatus", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdTwinDesiredPropPatchResource::ModuleApiModuleConnectionIdTwinDesiredPropPatchResource()
{
	this->set_path("/module/{connectionId: .*}/twinDesiredPropPatch/");
	this->set_method_handler("GET",
		std::bind(&ModuleApiModuleConnectionIdTwinDesiredPropPatchResource::GET_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdTwinDesiredPropPatchResource::~ModuleApiModuleConnectionIdTwinDesiredPropPatchResource()
{
}

void ModuleApiModuleConnectionIdTwinDesiredPropPatchResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");

			// added 1 line in merge
			std::string result = module_glue.WaitForDesiredPropertyPatch(connectionId);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// Changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdInputMessageInputNameResource::ModuleApiModuleConnectionIdInputMessageInputNameResource()
{
	this->set_path("/module/{connectionId: .*}/inputMessage/{inputName: .*}/");
	this->set_method_handler("GET",
		std::bind(&ModuleApiModuleConnectionIdInputMessageInputNameResource::GET_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdInputMessageInputNameResource::~ModuleApiModuleConnectionIdInputMessageInputNameResource()
{
}

void ModuleApiModuleConnectionIdInputMessageInputNameResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			const std::string inputName = request->get_path_parameter("inputName", "");

			// Added 1 line in merge
			std::string result = module_glue.WaitForInputMessage(connectionId, inputName);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// Changed 1 parameter in merge
				session->close(200, result, { {"Connection", "close"} });
				return;
			}

}



ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource::ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource()
{
	this->set_path("/module/{connectionId: .*}/waitForMethodAndReturnResponse/{methodName: .*}/");
	this->set_method_handler("PUT",
		std::bind(&ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource::PUT_method_handler, this,
			std::placeholders::_1));
}

ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource::~ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource()
{
}

void ModuleApiModuleConnectionIdWaitForMethodAndReturnResponseMethodNameResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */

			// Getting the path params
			const std::string connectionId = request->get_path_parameter("connectionId", "");
			const std::string methodName = request->get_path_parameter("methodName", "");

			// added 1 line in merge
			module_glue.WaitForMethodAndReturnResponse(connectionId, methodName, requestBody);

			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;

			/**
			 * Process the received information here
			 */

			if (status_code == 200) {
				// removed "OK" in merge
				session->close(200, "", { {"Connection", "close"} });
				return;
			}

		});
}




}
}
}
}

