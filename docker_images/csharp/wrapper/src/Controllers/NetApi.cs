/*
 * Azure IOT End-to-End Test Wrapper Rest Api
 *
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{
    /// <summary>
    ///
    /// </summary>
    public class NetApiController : Controller
    {
        /// <summary>
        /// Simulate a network disconnection
        /// </summary>

        /// <param name="disconnectType">disconnect method for dropped connection tests</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/net/disconnect/{disconnectType}")]
        [ValidateModelState]
        [SwaggerOperation("NetDisconnect")]
        public virtual IActionResult NetDisconnect([FromRoute][Required]string disconnectType)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Simulate a disconnect after the next C2D transfer
        /// </summary>

        /// <param name="disconnectType">disconnect method for dropped connection tests</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/net/disconnectAfterC2d/{disconnectType}")]
        [ValidateModelState]
        [SwaggerOperation("NetDisconnectAfterC2d")]
        public virtual IActionResult NetDisconnectAfterC2d([FromRoute][Required]string disconnectType)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Simulate a disconnect after the next D2C transfer
        /// </summary>

        /// <param name="disconnectType">disconnect method for dropped connection tests</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/net/disconnectAfterD2c/{disconnectType}")]
        [ValidateModelState]
        [SwaggerOperation("NetDisconnectAfterD2c")]
        public virtual IActionResult NetDisconnectAfterD2c([FromRoute][Required]string disconnectType)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Reconnect the network after a simulated network disconnection
        /// </summary>

        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/net/reconnect")]
        [ValidateModelState]
        [SwaggerOperation("NetReconnect")]
        public virtual IActionResult NetReconnect()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Set destination for net disconnect ops
        /// </summary>

        /// <param name="ip"></param>
        /// <param name="transportType">Transport to use</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/net/setDestination/{ip}/{transportType}")]
        [ValidateModelState]
        [SwaggerOperation("NetSetDestination")]
        public virtual IActionResult NetSetDestination([FromRoute][Required]string ip, [FromRoute][Required]string transportType)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }
    }
}
