/*
 * Azure IOT End-to-End Test Wrapper Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

// added 1 line in merge
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class ControlApiController : ControllerBase
    {
        // Added 1 line in merge
        internal ControlGlue control_glue = new ControlGlue();

        /// <summary>
        /// verify that the clients have cleaned themselves up completely
        /// </summary>

        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/control/cleanup")]
        [ValidateModelState]
        [SwaggerOperation("ControlCleanup")]
        public virtual IActionResult ControlCleanup()
        {
            // Changed impl in merge
            control_glue.CleanupResourcesAsync().Wait();
            return StatusCode(200);

        }

        /// <summary>
        /// Get capabilities for the objects in this server
        /// </summary>

        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/control/capabilities")]
        [ValidateModelState]
        [SwaggerOperation("ControlGetCapabilities")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult ControlGetCapabilities()
        {
            // Changed impl in merge
            Task<object> t = control_glue.GetCapabilities();
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Get statistics about the operation of the test wrapper
        /// </summary>

        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/control/wrapperStats")]
        [ValidateModelState]
        [SwaggerOperation("ControlGetWrapperStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult ControlGetWrapperStats()
        {
            // Chaned impl in merge
            throw new NotImplementedException();
        }

        /// <summary>
        /// log a message to output
        /// </summary>

        /// <param name="logMessage"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/control/message")]
        [ValidateModelState]
        [SwaggerOperation("ControlLogMessage")]
        public virtual IActionResult ControlLogMessage([FromBody]LogMessage logMessage)
        {
            // Changed impl in merge
            control_glue.PrintMessageAsync(logMessage.Message).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// send an arbitrary command
        /// </summary>

        /// <param name="cmd">command string</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/control/command")]
        [ValidateModelState]
        [SwaggerOperation("ControlSendCommand")]
        public virtual IActionResult ControlSendCommand([FromQuery][Required()]string cmd)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// set flags for the objects in this server to use
        /// </summary>

        /// <param name="flags"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/control/flags")]
        [ValidateModelState]
        [SwaggerOperation("ControlSetFlags")]
        public virtual IActionResult ControlSetFlags([FromBody]Object flags)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }
    }
}
