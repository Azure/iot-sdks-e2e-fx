/*
 * Azure IOT End-to-End Test Wrapper Rest Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// parameters used to invoke a method
    /// </summary>
    [DataContract]
    public partial class DefinitionsJsonmethodInvoke : IEquatable<DefinitionsJsonmethodInvoke>
    { 
        /// <summary>
        /// name of method to invoke
        /// </summary>
        /// <value>name of method to invoke</value>

        [DataMember(Name="methodName")]
        public string MethodName { get; set; }

        /// <summary>
        /// payload to send to the method
        /// </summary>
        /// <value>payload to send to the method</value>

        [DataMember(Name="payload")]
        public Object Payload { get; set; }

        /// <summary>
        /// number of seconds to wait for a response
        /// </summary>
        /// <value>number of seconds to wait for a response</value>

        [DataMember(Name="responseTimeoutInSeconds")]
        public int? ResponseTimeoutInSeconds { get; set; }

        /// <summary>
        /// number of seconds to wait for the module to connect
        /// </summary>
        /// <value>number of seconds to wait for the module to connect</value>

        [DataMember(Name="connectTimeoutInSeconds")]
        public int? ConnectTimeoutInSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefinitionsJsonmethodInvoke {\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  ResponseTimeoutInSeconds: ").Append(ResponseTimeoutInSeconds).Append("\n");
            sb.Append("  ConnectTimeoutInSeconds: ").Append(ConnectTimeoutInSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DefinitionsJsonmethodInvoke)obj);
        }

        /// <summary>
        /// Returns true if DefinitionsJsonmethodInvoke instances are equal
        /// </summary>
        /// <param name="other">Instance of DefinitionsJsonmethodInvoke to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefinitionsJsonmethodInvoke other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MethodName == other.MethodName ||
                    MethodName != null &&
                    MethodName.Equals(other.MethodName)
                ) && 
                (
                    Payload == other.Payload ||
                    Payload != null &&
                    Payload.Equals(other.Payload)
                ) && 
                (
                    ResponseTimeoutInSeconds == other.ResponseTimeoutInSeconds ||
                    ResponseTimeoutInSeconds != null &&
                    ResponseTimeoutInSeconds.Equals(other.ResponseTimeoutInSeconds)
                ) && 
                (
                    ConnectTimeoutInSeconds == other.ConnectTimeoutInSeconds ||
                    ConnectTimeoutInSeconds != null &&
                    ConnectTimeoutInSeconds.Equals(other.ConnectTimeoutInSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MethodName != null)
                    hashCode = hashCode * 59 + MethodName.GetHashCode();
                    if (Payload != null)
                    hashCode = hashCode * 59 + Payload.GetHashCode();
                    if (ResponseTimeoutInSeconds != null)
                    hashCode = hashCode * 59 + ResponseTimeoutInSeconds.GetHashCode();
                    if (ConnectTimeoutInSeconds != null)
                    hashCode = hashCode * 59 + ConnectTimeoutInSeconds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DefinitionsJsonmethodInvoke left, DefinitionsJsonmethodInvoke right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DefinitionsJsonmethodInvoke left, DefinitionsJsonmethodInvoke right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
